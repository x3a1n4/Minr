@using teraRabbitsUtils
# Pull area towards player (like spikes)

# Pseudocode: grab a line from the block to the player
# Go 1 units along it n times, where n is the inverse of the distance to the target block
# Set self at locations
@define Action thisAction = Action("Pull [size {{size}}]", player)

# Set up buffer
@define BlockLocation[] blBuffer = BlockLocation[]
@define String[] blockTypeBuffer = String[]

@for Int x in list::range(-size, size)
    @for Int y in list::range(-size, size)
        @for Int z in list::range(-size, size)
            @define Block from = getRelativeBlock(targetBlock, x, y, z)

            @if !from.isEmpty()
                @define Double strength = size - from.getLocation().asBlockVector3().distance(targetBlock.getLocation().asBlockVector3())
                @define Vector3 delta = (player.getLocation().asVector3() - from.getLocation().asBlockVector3().asVector3()).normalise()

                @define Vector3 origPos = from.getLocation().asBlockVector3().asVector3()
                @for Int i in list::range(0, Int(strength))
                    @var origPos = origPos + delta

                    @var blBuffer.append(BlockLocation(origPos.asBlockVector3(), getVanilla(from.getWorld())))
                    @var blockTypeBuffer.append(getVanilla(from.getBlockType()))
                @done
            @fi
        @done
    @done
@done

# Change blocks
@for Int i in list::range(0, blBuffer.length())
    @var trySetBlock(thisAction, blBuffer[i], blockTypeBuffer[i])
@done

@var log("Pulled {{thisAction.length()}} Blocks", player)